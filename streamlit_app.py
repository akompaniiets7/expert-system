import streamlit as st
import json
import os
from datetime import datetime

# –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –ª–µ–∫—Ü—ñ–π
@st.cache_data
def load_lectures():
    lectures = {}
    for file in os.listdir("lectures"):
        if file.endswith(".json"):
            with open(os.path.join("lectures", file), encoding="utf-8-sig") as f:
                data = json.load(f)
                lectures[data["—Ç–µ–º–∞"]] = data
    return lectures

# –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —Ç–µ—Å—Ç—ñ–≤
@st.cache_data
def load_tests():
    tests = {}
    for file in os.listdir("tests"):
        if file.endswith(".json"):
            with open(os.path.join("tests", file), encoding="utf-8-sig") as f:
                data = json.load(f)
                tests[data["—Ç–µ–º–∞"]] = data["–ø–∏—Ç–∞–Ω–Ω—è"]
    return tests

# –ó–±–µ—Ä–µ–∂–µ–Ω–Ω—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç—É
def save_result(user, —Ç–µ–º–∞, –ø—Ä–∞–≤–∏–ª—å–Ω–∏—Ö, –≤—Å—å–æ–≥–æ, —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ—ó):
    result = {
        "–∫–æ—Ä–∏—Å—Ç—É–≤–∞—á": user,
        "—Ç–µ–º–∞": —Ç–µ–º–∞,
        "–¥–∞—Ç–∞": datetime.now().strftime("%Y-%m-%d %H:%M"),
        "–ø—Ä–∞–≤–∏–ª—å–Ω–∏—Ö": –ø—Ä–∞–≤–∏–ª—å–Ω–∏—Ö,
        "—É—Å—å–æ–≥–æ": –≤—Å—å–æ–≥–æ,
        "—Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ—ó": —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ—ó
    }
    if os.path.exists("results.json"):
        with open("results.json", "r", encoding="utf-8") as f:
            results = json.load(f)
    else:
        results = []
    results.append(result)
    with open("results.json", "w", encoding="utf-8") as f:
        json.dump(results, f, ensure_ascii=False, indent=2)

# –ü–æ—è—Å–Ω–µ–Ω–Ω—è –∑ –ª–µ–∫—Ü—ñ—ó
def show_explanation(lecture, –∑–∞–≥–æ–ª–æ–≤–æ–∫, –∫–ª—é—á):
    for –ø—É–Ω–∫—Ç in lecture.get("–ø—É–Ω–∫—Ç–∏", []):
        if –ø—É–Ω–∫—Ç.get("–∑–∞–≥–æ–ª–æ–≤–æ–∫") == –∑–∞–≥–æ–ª–æ–≤–æ–∫:
            for –ø—ñ–¥—Ç–µ–º–∞ in –ø—É–Ω–∫—Ç.get("–ø—ñ–¥—Ç–µ–º–∏", []):
                if –ø—ñ–¥—Ç–µ–º–∞.get("–∫–ª—é—á") == –∫–ª—é—á:
                    st.info(f"üìò –ü–æ—è—Å–Ω–µ–Ω–Ω—è: {–ø—ñ–¥—Ç–µ–º–∞['—Ç–µ–∫—Å—Ç']}")
                    return

# –û—Å–Ω–æ–≤–Ω–∞ –ª–æ–≥—ñ–∫–∞ —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è
st.set_page_config(page_title="–ï–∫—Å–ø–µ—Ä—Ç–Ω–∞ —Å–∏—Å—Ç–µ–º–∞ –∑ –º–∞—Ç–µ—Ä—ñ–∞–ª–æ–∑–Ω–∞–≤—Å—Ç–≤–∞")
st.title("üéì –ï–∫—Å–ø–µ—Ä—Ç–Ω–∞ —Å–∏—Å—Ç–µ–º–∞ –∑ –º–∞—Ç–µ—Ä—ñ–∞–ª–æ–∑–Ω–∞–≤—Å—Ç–≤–∞")

lectures = load_lectures()
tests = load_tests()

topics = list(tests.keys())

# --- –°—Ç–∞–Ω –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ ---
if "user_started" not in st.session_state:
    st.session_state.user_started = False

if not st.session_state.user_started:
    user_name = st.text_input("–í–≤–µ–¥—ñ—Ç—å –≤–∞—à–µ —ñ–º'—è –¥–ª—è –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç—É:")
    selected_topic = st.selectbox("–û–±–µ—Ä—ñ—Ç—å —Ç–µ–º—É –¥–ª—è –ø—Ä–æ—Ö–æ–¥–∂–µ–Ω–Ω—è —Ç–µ—Å—Ç—É:", ["–í—Å—ñ —Ç–µ–º–∏"] + topics)

    if st.button("–ü–æ—á–∞—Ç–∏ —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è") and user_name.strip() != "":
        st.session_state.user_started = True
        st.session_state.user_name = user_name
        st.session_state.selected_topic = selected_topic
        st.experimental_rerun()
else:
    user_name = st.session_state.user_name
    selected_topic = st.session_state.selected_topic
    st.success(f"–í—ñ—Ç–∞—î–º–æ, {user_name}! –í–∏ –ø—Ä–æ—Ö–æ–¥–∏—Ç–µ —Ç–µ—Å—Ç –∑ —Ç–µ–º–∏: {selected_topic}")

    recommendations = []
    correct_total = 0
    question_total = 0

    for —Ç–µ–º–∞ in (topics if selected_topic == "–í—Å—ñ —Ç–µ–º–∏" else [selected_topic]):
        st.subheader(f"üìö –¢–µ–º–∞: {—Ç–µ–º–∞}")
        questions = tests[—Ç–µ–º–∞]
        correct = 0

        for idx, q in enumerate(questions):
            st.markdown(f"**{q['—Ç–µ–∫—Å—Ç']}**")

            if isinstance(q["–ø—Ä–∞–≤–∏–ª—å–Ω–∞"], list):
                selected = st.multiselect("–û–±–µ—Ä—ñ—Ç—å –≤–∞—Ä—ñ–∞–Ω—Ç–∏:", q["–≤–∞—Ä—ñ–∞–Ω—Ç–∏"], key=f"q_{—Ç–µ–º–∞}_{idx}")
                selected_idx = [q["–≤–∞—Ä—ñ–∞–Ω—Ç–∏"].index(x) for x in selected]
                if sorted(selected_idx) == sorted(q["–ø—Ä–∞–≤–∏–ª—å–Ω–∞"]):
                    st.success("‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω–æ!")
                    correct += 1
                else:
                    st.error("‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ.")
                    show_explanation(lectures[—Ç–µ–º–∞], q["–∑–∞–≥–æ–ª–æ–≤–æ–∫"], q["–∫–ª—é—á"])
                    recommendations.append((—Ç–µ–º–∞, q["–∑–∞–≥–æ–ª–æ–≤–æ–∫"], q["–∫–ª—é—á"]))
            else:
                answer = st.radio("–û–±–µ—Ä—ñ—Ç—å –æ–¥–∏–Ω –≤–∞—Ä—ñ–∞–Ω—Ç:", q["–≤–∞—Ä—ñ–∞–Ω—Ç–∏"], key=f"q_{—Ç–µ–º–∞}_{idx}", index=None)
                answer_idx = q["–≤–∞—Ä—ñ–∞–Ω—Ç–∏"].index(answer)
                if answer_idx == q["–ø—Ä–∞–≤–∏–ª—å–Ω–∞"]:
                    st.success("‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω–æ!")
                    correct += 1
                else:
                    st.error("‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ.")
                    show_explanation(lectures[—Ç–µ–º–∞], q["–∑–∞–≥–æ–ª–æ–≤–æ–∫"], q["–∫–ª—é—á"])
                    recommendations.append((—Ç–µ–º–∞, q["–∑–∞–≥–æ–ª–æ–≤–æ–∫"], q["–∫–ª—é—á"]))

        st.markdown(f"**–†–µ–∑—É–ª—å—Ç–∞—Ç –ø–æ —Ç–µ–º—ñ \"{—Ç–µ–º–∞}\": {correct}/{len(questions)}**")
        correct_total += correct
        question_total += len(questions)

    st.markdown("---")
    st.subheader("üìä –ó–∞–≥–∞–ª—å–Ω–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç")
    st.write(f"–ü—Ä–∞–≤–∏–ª—å–Ω–∏—Ö –≤—ñ–¥–ø–æ–≤—ñ–¥–µ–π: **{correct_total} / {question_total}** ({(correct_total/question_total)*100:.1f}%)")

    if recommendations:
        st.warning("üìå –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ—ó:")
        for —Ç–µ–º–∞, –∑–∞–≥–æ–ª–æ–≤–æ–∫, –∫–ª—é—á in recommendations:
            st.write(f"- **{—Ç–µ–º–∞} ‚Üí {–∑–∞–≥–æ–ª–æ–≤–æ–∫} ‚Üí {–∫–ª—é—á}**")
    else:
        st.success("–í—ñ—Ç–∞—î–º–æ! –£—Å—ñ –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ –ø—Ä–∞–≤–∏–ª—å–Ω—ñ üéâ")

    save_result(user_name, selected_topic, correct_total, question_total, recommendations)
